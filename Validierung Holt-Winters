import numpy as np
import pandas as pd
from pandas import read_csv
from statsmodels.tsa.api import ExponentialSmoothing as HWES
from sklearn.metrics import mean_squared_error
from math import sqrt
from sklearn.model_selection import train_test_split
import datetime
import warnings
warnings.filterwarnings('ignore')

def dataframe_read(file, produktgruppe):
    dataset = read_csv(file,
                    delimiter=";", parse_dates=[4], infer_datetime_format=True, dayfirst=True, header=0,
                    low_memory=False, decimal=',',
                    thousands='.')
    dataset = dataset[dataset['MATNR'].str.contains(produktgruppe)]
    dataset = dataset[['KWMENG', 'VDATU']]
    dataset['VDATU'] = dataset['VDATU'].astype('datetime64[ns]')
    return dataset

def start_date_offset(start_fc_date, train_size, freq):
	if freq == 'B':
		start_date = pd.to_datetime(start_fc_date, dayfirst=True) - pd.tseries.offsets.BusinessDay(train_size)
	elif freq == 'W':
		start_date = pd.to_datetime(start_fc_date, dayfirst=True) - pd.DateOffset(weeks=train_size)
	return start_date

def end_date_offset(start_date, periods, freq):
	if freq == 'B':
		end_date = pd.to_datetime(start_date, dayfirst=True) + pd.tseries.offsets.BusinessDay(periods - 1)
	elif freq == 'W':
		end_date = pd.to_datetime(start_date, dayfirst=True) + pd.DateOffset(weeks=periods) - pd.DateOffset(days=1)
	return end_date

def dataframe_resampling(dataset, freq, start_date, end_date):
    dataset_resampled = dataset.resample(freq, on='VDATU', label='right', closed='right').sum() \
        .reset_index().sort_values(by='VDATU')
    dataset_resampled = dataset_resampled.set_index(dataset_resampled.VDATU)
    index = pd.date_range(start=pd.to_datetime(start_date, dayfirst=True), end=pd.to_datetime(end_date, dayfirst=True), freq=freq)
    dataset_resampled = pd.DataFrame(dataset_resampled, index=index)
    return dataset_resampled

def rmse(result, column_name):
    rmse = sqrt(mean_squared_error(result['KWMENG'], result[column_name]))
    rmse = round(rmse, 0)
    return rmse

def rmses(result, column_name):
    n_result = len(result)
    rmses = rmse(result, column_name) * n_result * 100 / np.sum(result['KWMENG'])
    rmses = round(rmses, 2)
    return rmses


if __name__ == "__main__":
    # === Preparing Data ===
    # == Define Time Range, Product ==
    start_fc_date = '06-01-2020'
    end_date = '31-10-2021'
    Produktgruppe = 'C4'  # 'A', 'B', 'C'
    now = datetime.datetime.now()
    now = now.strftime('%Y-%m-%d_%H-%M')
    csv_path = '../'
    csv_file = 'Veltins_Roh.csv'
    csv_out_path = '../Results/Forecast_Seasonal_Validierung/'
    # train_size for business day should be multiplicity of 5
    step_CV = 6
    freq = 'W'
    step = 5
    forecast = (5 if freq == 'B' else 1)
    m = (52 if freq == 'W' else 240)
    title_freq = 'Business_Day' if freq == 'B' else 'Weekly'

    # == Read CSV Data
    data = dataframe_read(csv_path + csv_file, Produktgruppe)
    print('data: \n', data.head(15))
    
    # == starting Validation ==
    if freq == 'W':
        train_size_list = [156]
    else:
        train_size_list = [780]

    avg_errors_HWES = []
    for ts in train_size_list:
        start_date = start_date_offset(start_fc_date, ts, freq)
        data_resample = dataframe_resampling(data, freq, start_date, end_date)
        start_CV = start_date
        for stCV in range(step_CV):
            errors_HWES = []
            errorsp_HWES = []
            index_orig = pd.date_range(start=pd.to_datetime(start_CV, dayfirst=True),
                                       periods=ts + (forecast * step), freq=freq)
            data_orig = pd.DataFrame(data_resample, index_orig)
            data_orig = data_orig['KWMENG']
            train_orig, test_orig = train_test_split(data_orig, train_size=ts, shuffle=False)
            print('test_original: ', test_orig)
            start_rolling = start_CV
            fcst_HWES = []
            for st in range(step):
                index = pd.date_range(start=pd.to_datetime(start_rolling, dayfirst=True),
                                      periods=ts + forecast, freq=freq)
                data_rolling = pd.DataFrame(data_orig, index)
                train, test = train_test_split(data_rolling, train_size=ts, shuffle=False)
                try:
                    # == HWES ==
                    fit_HWES = HWES(train['KWMENG'], trend='add', seasonal='add', damped_trend=True, seasonal_periods=m,
                        initialization_method='estimated').fit()
                    res_HWES = fit_HWES.forecast(steps=forecast)
                    print(res_HWES.tail(30))
                    fcst_HWES.extend(res_HWES)

                except:
                    print('errorred')
                    if freq == 'B':
                        fcst_HWES.extend([-9999999., -9999999., -9999999., -9999999., -9999999.])
                    else:
                        fcst_HWES.append(-9999999.)

                print('fcst_HWES', fcst_HWES)
                start_rolling = pd.to_datetime(start_rolling, dayfirst=True) + pd.DateOffset(weeks=1)

            errors_HWES.append(sqrt(mean_squared_error(test_orig, fcst_HWES)))
            errorsp_HWES.append(sqrt(mean_squared_error(test_orig, fcst_HWES)) * len(test_orig) * 100 / np.sum(test_orig))
            start_CV = pd.to_datetime(start_CV, dayfirst=True) + pd.DateOffset(weeks=8)
        ts_result_HWES = [ts, np.mean(errors_HWES), np.mean(errorsp_HWES)]
        print('HWES\n', ts_result_HWES)
        avg_errors_HWES.append(ts_result_HWES)
    avg_errors_HWES = pd.DataFrame(avg_errors_HWES)
    avg_errors_HWES.columns = ['train_size', 'RMSE', 'RMSE(%)']

    avg_errors_HWES = avg_errors_HWES.sort_values('RMSE', ascending=False)
    print('HWES\n', avg_errors_HWES)

    avg_errors_HWES.to_excel(csv_out_path + now + '_HWES_CV_' + title_freq + '_' + Produktgruppe + '_'
                        + '_' + start_fc_date + '.xlsx')
